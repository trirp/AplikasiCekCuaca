import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Map;
import org.json.JSONObject;
import java.util.HashMap;

public class CekCuaca extends javax.swing.JFrame {

/**
     *
     */
    public CekCuaca() {
        initComponents();
    }

    private static class JSONObject {

        public JSONObject() {
        }

        private JSONObject(String dataCuaca) {
            throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        }

        private JSONObject getJSONObject(String main) {
            throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        }

        private Object getJSONArray(String weather) {
            throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        }

        private double getDouble(String temp) {
            throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        }

        private String getString(String description) {
            throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        }
    }
    
/**
     *
     * @param dataCuaca
     * @return
     */

    public class WeatherService {
        private static final String API_KEY = "0f5f7846edc46982cd937c7442c5171f";
        private static final String BASE_URL = "http://api.openweathermap.org/data/2.5/weather?q=";

        public static String getWeatherData(String city) {
            StringBuilder result = new StringBuilder();
            try {
                String urlString = BASE_URL + city + "&units=metric&appid=" + API_KEY;
                URL url = new URL(urlString);

                HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                conn.setRequestMethod("GET");

                BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                String line;
                while ((line = rd.readLine()) != null) {
                    result.append(line);
                }
                rd.close();
            } catch (Exception e) {
                e.printStackTrace();
                return null;
            }

            return result.toString();
        }
    }
       private Map<String, String> parseWeatherData(String dataCuaca) {
        Map<String, String> weatherInfo = new HashMap<>();
        try {
            JSONObject jsonObject = new JSONObject(dataCuaca);
            JSONObject main = jsonObject.getJSONObject("main");
            JSONObject weather = jsonObject.getJSONArray("weather").getJSONObject(0);

            // Correctly retrieve the temperature as a double
            double temperature = main.getDouble("temp");
            weatherInfo.put("temperature", String.format("%.1f", temperature)); // Format to 1 decimal place

            // Retrieve description
            String description = weather.getString("description");
            weatherInfo.put("description", description);

            // Retrieve weather type (this can be adjusted as per your requirements)
            String weatherType = getWeatherType(description);
            weatherInfo.put("weatherType", weatherType);
        } catch (Exception e) {
        }
        return weatherInfo;
    }
    private String getWeatherIconPath(String weatherType) {
        // Ensure weatherType is not null, otherwise use a default
        if (weatherType == null) {
            weatherType = "unknown";  // Default to "unknown" if weatherType is null
        }

        // Choose the appropriate icon based on the weather type
        return switch (weatherType) {
            case "hot" -> "sun.png";
            case "moderate" -> "cloud.png";
            case "cold" -> "snow.png";
            default -> "unknown.png";
        }; // Default icon if no match
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new java.awt.Panel();
        cmbLokasiFavorit = new javax.swing.JComboBox<>();
        txtKota = new javax.swing.JTextField();
        btnCekCuaca = new javax.swing.JButton();
        lblCuaca = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblGambarCuaca = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panel1.setBackground(new java.awt.Color(255, 102, 102));

        cmbLokasiFavorit.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Banjarmasin", "Banjarbaru", "Martapura", "Kapuas" }));

        btnCekCuaca.setText("Cek Cuaca");
        btnCekCuaca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCekCuacaActionPerformed(evt);
            }
        });

        lblCuaca.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblCuaca.setText("Cuaca :");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Masukkan Kota :");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Deskripsi :");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Suhu :");

        lblGambarCuaca.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblGambarCuaca.setText("Gambar :");

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblGambarCuaca)
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbLokasiFavorit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCuaca, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(75, 75, 75)
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtKota, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(86, 86, 86)
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnCekCuaca)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(89, Short.MAX_VALUE))
            .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panel1Layout.createSequentialGroup()
                    .addGap(192, 192, 192)
                    .addComponent(jLabel2)
                    .addContainerGap(441, Short.MAX_VALUE)))
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtKota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnCekCuaca))
                    .addComponent(cmbLokasiFavorit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(82, 82, 82)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCuaca)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 193, Short.MAX_VALUE)
                .addComponent(lblGambarCuaca)
                .addGap(145, 145, 145))
            .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panel1Layout.createSequentialGroup()
                    .addGap(44, 44, 44)
                    .addComponent(jLabel2)
                    .addContainerGap(453, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCekCuacaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCekCuacaActionPerformed
String kota = txtKota.getText();
    if (kota.isEmpty()) {
        kota = cmbLokasiFavorit.getSelectedItem().toString();
    }
    if (!kota.isEmpty()) {
        String dataCuaca = WeatherService.getWeatherData(kota);
        if (dataCuaca != null) {
            Map<String, String> weatherInfo = parseWeatherData(dataCuaca);
            lblCuaca.setText("Cuaca di " + kota);
            jLabel3.setText("Suhu: " + weatherInfo.get("temperature"));
            jLabel4.setText("Deskripsi: " + weatherInfo.get("description"));

            // Display icon based on weather type
            String weatherType = weatherInfo.get("weatherType");
            lblGambarCuaca.setIcon(new javax.swing.ImageIcon(getClass().getResource(getWeatherIconPath(weatherType))));
        } else {
            lblCuaca.setText("Data cuaca tidak ditemukan atau terjadi kesalahan.");
            jLabel3.setText("Suhu: N/A");
            jLabel4.setText("Deskripsi: N/A");
            lblGambarCuaca.setIcon(null);
        }
    } else {
        lblCuaca.setText("Masukkan nama kota.");
        jLabel3.setText("Suhu: N/A");
        jLabel4.setText("Deskripsi: N/A");
        lblGambarCuaca.setIcon(null);
    }
    }//GEN-LAST:event_btnCekCuacaActionPerformed

    private String getWeatherType(String description) {
    if (description.contains("clear")) {
        return "hot";  // Mengasumsikan langit cerah adalah cuaca panas
    } else if (description.contains("clouds")) {
        return "moderate";  // Cuaca berawan dianggap moderat
    } else if (description.contains("rain") || description.contains("drizzle")) {
        return "moderate";  // Cuaca hujan dianggap moderat
    } else if (description.contains("snow")) {
        return "cold";  // Cuaca bersalju dianggap dingin
    } else {
        return "unknown";  // Jika tidak terdeteksi
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CekCuaca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CekCuaca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CekCuaca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CekCuaca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new CekCuaca().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCekCuaca;
    private javax.swing.JComboBox<String> cmbLokasiFavorit;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblCuaca;
    private javax.swing.JLabel lblGambarCuaca;
    private java.awt.Panel panel1;
    private javax.swing.JTextField txtKota;
    // End of variables declaration//GEN-END:variables
}
